<?xml version="1.0" encoding="utf-8" ?>
<entity>

	<queries>
		<query Id="GetUserInfo">Select * from login_info where Username = '{0}' and Password = '{1}'</query>
		<query Id="GetUserInfoById">Select * from login_info where LOGIN_INFO_ID = {0}</query>
		<query Id="UpdateRememberMeCodeValue">Update CODE_VALUE SET DATA1 = '{0}' WHERE CODE_ID = 1 AND CODE_VALUE = 'USER'</query>
		<query Id="GetUpdateRememberCodeValue">SELECT * FROM CODE_VALUE WHERE CODE_ID = 1 AND CODE_VALUE = 'USER'</query>
		<query Id="LoadCategory">Select Expenses_Category_Name from Expenses_Category where Expenses_Category_Table_Value = '{0}'</query>
		<query Id="GetExpensesCategoryIdByName">Select Top 1 Expenses_Category_Id from Expenses_Category where Expenses_Category_Table_Value = '{0}' and Expenses_Category_Name = '{1}'</query>
		<query Id="DeleteExpensesCategory">Delete Expenses_Category where Expenses_Category_Id = {0}</query>
		<query Id="LoadHusbandWifeChart">
			Select A.EXPENSES_CATEGORY_ID,B.Expenses_Category_Name, Sum(Husband_Wife_Amt) Amount, MONTH(Husband_Wife_Date) Months from dbo.Husband_Wife A
			Inner Join Expenses_Category B
			On A.EXPENSES_CATEGORY_ID = B.Expenses_Category_Id
			where HUSBAND_WIFE_TYPE_VALUE = 'WIFE' and A.EXPENSES_CATEGORY_ID is not null And
			Husband_Wife_Date between '{0}' and '{1}'
			group by A.EXPENSES_CATEGORY_ID , B.Expenses_Category_Name, MONTH(Husband_Wife_Date) order by Months asc, Amount desc
		</query>
		<query Id="LogoffQuery">Update CODE_VALUE SET DATA1 = null WHERE CODE_ID = 1 AND CODE_VALUE = 'USER'</query>
		<query Id="LoadExpensesChart">
			Select A.EXPENSES_CATEGORY_ID,B.Expenses_Category_Name, Sum(EXPENSES_AMT) Amount, MONTH(EXPENSES_DATE) Months from dbo.EXPENSES_TRACKER A
			Inner Join Expenses_Category B
			On A.EXPENSES_CATEGORY_ID = B.Expenses_Category_Id
			where Expenses_Type_Value = 'OUTG' and A.EXPENSES_CATEGORY_ID is not null And
			EXPENSES_DATE between '{0}' and '{1}'
			group by A.EXPENSES_CATEGORY_ID , B.Expenses_Category_Name, MONTH(EXPENSES_DATE) order by Months asc, Amount desc
		</query>
		<query Id="UpdateShareHeader">Update SHARES_TRACKER_HEADER Set SHARES_NAME = '{0}', SERVICE_CODE_VALUE = '{1}' where SHARES_TRACKER_HEADER_ID = {2}</query>
		<query Id="GetLastDate">
			Select MAX(Last_Date) from
			(
			Select MAX(SHARES_BUY_DATE) As Last_Date from SHARES_TRACKER_BUY BUY Inner Join  SHARES_TRACKER_HEADER SH
			On BUY.SHARES_TRACKER_HEADER_ID = SH.SHARES_TRACKER_HEADER_ID where User_Id = {0} AND SH.DEMAT_ACCOUNT_VALUE = '{1}'
			Union All
			Select MAX(SHARES_SELL_DATE) As Last_Date from SHARES_TRACKER_SELL SELL Inner Join  SHARES_TRACKER_HEADER SH
			On SELL.SHARES_TRACKER_HEADER_ID = SH.SHARES_TRACKER_HEADER_ID where User_Id = {0} AND SH.DEMAT_ACCOUNT_VALUE = '{1}'
			Union All
			Select MAX(SHARES_CHARGES_DATE) As Last_Date from [dbo].[SHARES_TRACKER_EXTRA_CHARGES] where USER_ID = {0}
			and Is_Consider = 1 and DEMAT_ACCOUNT_VALUE = '{1}'
			Union All
			Select MAX(SHARES_TRANSACTION_DATE) As Last_Date from [dbo].[SHARES_PAYIN_PAYOUT] where user_id = {0} AND DEMAT_ACCOUNT_VALUE = '{1}'
			Union All
			Select MAX(DIVIDEND_DATE) As Last_Date from [dbo].[SHARE_DIVIDEND] DIV where DIV.User_Id = {0} AND DIV.DEMAT_ACCOUNT_VALUE = '{1}'
			) As LastDateQuery
		</query>
		<query Id="GetUserList">SELECT USERNAME FROM LOGIN_INFO</query>
		<query Id="GetServiceNames">SELECT CODE_VALUE, CODE_VALUE_DESCRIPTION FROM CODE_VALUE WHERE CODE_ID = 7</query>
		<query Id="LoadMonthlyChart">
			WITH SHARETRACKERBUY(SHARES_ID, AMOUNT)
			AS
			(
			SELECT HDR.SHARES_TRACKER_HEADER_ID AS SHARES_ID, ISNULL(SUM((BUY.SHARES_PRICE_AMT * BUY.SHARES_QUANTITY)+ ISNULL(BUY.SHARES_CHARGES_AMT,0)),0) AS AMOUNT FROM SHARES_TRACKER_HEADER HDR
			INNER JOIN SHARES_TRACKER_BUY BUY
			ON HDR.SHARES_TRACKER_HEADER_ID = BUY.SHARES_TRACKER_HEADER_ID
			GROUP BY HDR.SHARES_TRACKER_HEADER_ID
			),
			SHARETRACKERSELL(SHARES_ID, AMOUNT)
			AS
			(
			SELECT HDR.SHARES_TRACKER_HEADER_ID AS SHARES_ID, ISNULL(SUM((SEL.SHARES_PRICE_AMT * SEL.SHARES_QUANTITY) - ISNULL(SEL.SHARES_CHARGES_AMT,0)),0) AS AMOUNT FROM SHARES_TRACKER_HEADER HDR
			INNER JOIN SHARES_TRACKER_SELL SEL
			ON HDR.SHARES_TRACKER_HEADER_ID = SEL.SHARES_TRACKER_HEADER_ID
			GROUP BY HDR.SHARES_TRACKER_HEADER_ID
			)
			SELECT  SHARE_YEAR, SHARE_MONTH, SUM(SHARE_AMT) AS PROFIT_LOSS FROM (
			SELECT (B.AMOUNT - A.AMOUNT) AS SHARE_AMT,
			(SELECT MONTH(MAX(SHARES_SELL_DATE)) FROM SHARES_TRACKER_SELL WHERE SHARES_TRACKER_HEADER_ID = HD.SHARES_TRACKER_HEADER_ID) AS SHARE_MONTH,
			(SELECT YEAR(MAX(SHARES_SELL_DATE)) FROM SHARES_TRACKER_SELL WHERE SHARES_TRACKER_HEADER_ID = HD.SHARES_TRACKER_HEADER_ID) AS SHARE_YEAR
			FROM SHARES_TRACKER_HEADER HD
			LEFT JOIN SHARETRACKERBUY A
			ON SHARES_TRACKER_HEADER_ID = A.SHARES_ID
			LEFT JOIN SHARETRACKERSELL B
			ON A.SHARES_ID = B.SHARES_ID
			
			) AS MAIN
			WHERE SHARE_YEAR = {0}
			GROUP BY SHARE_YEAR, SHARE_MONTH
			HAVING SUM(SHARE_AMT) IS NOT NULL
			ORDER BY SHARE_YEAR DESC, SHARE_MONTH DESC
		</query>
		<query Id="LoadMonthlyChartService">
			WITH SHARETRACKERBUY(SHARES_ID, AMOUNT)
			AS
			(
			SELECT HDR.SHARES_TRACKER_HEADER_ID AS SHARES_ID, ISNULL(SUM((BUY.SHARES_PRICE_AMT * BUY.SHARES_QUANTITY)+ ISNULL(BUY.SHARES_CHARGES_AMT,0)),0) AS AMOUNT FROM SHARES_TRACKER_HEADER HDR
			INNER JOIN SHARES_TRACKER_BUY BUY
			ON HDR.SHARES_TRACKER_HEADER_ID = BUY.SHARES_TRACKER_HEADER_ID
			GROUP BY HDR.SHARES_TRACKER_HEADER_ID
			),
			SHARETRACKERSELL(SHARES_ID, AMOUNT)
			AS
			(
			SELECT HDR.SHARES_TRACKER_HEADER_ID AS SHARES_ID, ISNULL(SUM((SEL.SHARES_PRICE_AMT * SEL.SHARES_QUANTITY) - ISNULL(SEL.SHARES_CHARGES_AMT,0)),0) AS AMOUNT FROM SHARES_TRACKER_HEADER HDR
			INNER JOIN SHARES_TRACKER_SELL SEL
			ON HDR.SHARES_TRACKER_HEADER_ID = SEL.SHARES_TRACKER_HEADER_ID
			GROUP BY HDR.SHARES_TRACKER_HEADER_ID
			)
			SELECT (SELECT CODE_VALUE_DESCRIPTION FROM CODE_VALUE WHERE CODE_ID = 7 AND CODE_VALUE = SERVICE_CODE_VALUE) AS SERVICES ,SUM(SHARE_AMT) AS PROFIT_LOSS FROM (
			SELECT (B.AMOUNT - A.AMOUNT) AS SHARE_AMT,
			(SELECT MONTH(MAX(SHARES_SELL_DATE)) FROM SHARES_TRACKER_SELL WHERE SHARES_TRACKER_HEADER_ID = HD.SHARES_TRACKER_HEADER_ID) AS SHARE_MONTH,
			(SELECT YEAR(MAX(SHARES_SELL_DATE)) FROM SHARES_TRACKER_SELL WHERE SHARES_TRACKER_HEADER_ID = HD.SHARES_TRACKER_HEADER_ID) AS SHARE_YEAR,
			SERVICE_CODE_VALUE
			FROM SHARES_TRACKER_HEADER HD
			LEFT JOIN SHARETRACKERBUY A
			ON SHARES_TRACKER_HEADER_ID = A.SHARES_ID
			LEFT JOIN SHARETRACKERSELL B
			ON A.SHARES_ID = B.SHARES_ID
			WHERE HD.USER_ID in ({0})
			) AS MAIN
			Where Share_Year = {1} and SHARE_MONTH = {2}
			GROUP BY SHARE_YEAR, SHARE_MONTH, SERVICE_CODE_VALUE
			HAVING SUM(SHARE_AMT) IS NOT NULL
			ORDER BY SHARE_YEAR desc, SHARE_MONTH DESC
		</query>
		<query Id="GetDematAccountName">SELECT CODE_VALUE, CODE_VALUE_DESCRIPTION FROM CODE_VALUE WHERE CODE_ID = 8</query>
		<query Id="UpdateMutualFundHeader">UPDATE MUTUAL_FUND_HEADER SET MUTUAL_FUND_NAME = '{0}', MUTUAL_FUND_CREATED_DATE = '{1}'
			,EXIT_LOAD = {2}, IS_SIP = '{3}' WHERE MUTUAL_FUND_HEADER_ID = {4}
		</query>
		<query Id="LoadYearlyChart">
			;WITH SHARETRACKERBUY(SHARES_ID, AMOUNT)
			AS
			(
			SELECT HDR.SHARES_TRACKER_HEADER_ID AS SHARES_ID, ISNULL(SUM((BUY.SHARES_PRICE_AMT * BUY.SHARES_QUANTITY)+ ISNULL(BUY.SHARES_CHARGES_AMT,0)),0) AS AMOUNT FROM SHARES_TRACKER_HEADER HDR
			INNER JOIN SHARES_TRACKER_BUY BUY
			ON HDR.SHARES_TRACKER_HEADER_ID = BUY.SHARES_TRACKER_HEADER_ID
			GROUP BY HDR.SHARES_TRACKER_HEADER_ID
			),
			SHARETRACKERSELL(SHARES_ID, AMOUNT)
			AS
			(
			SELECT HDR.SHARES_TRACKER_HEADER_ID AS SHARES_ID, ISNULL(SUM((SEL.SHARES_PRICE_AMT * SEL.SHARES_QUANTITY) - ISNULL(SEL.SHARES_CHARGES_AMT,0)),0) AS AMOUNT FROM SHARES_TRACKER_HEADER HDR
			INNER JOIN SHARES_TRACKER_SELL SEL
			ON HDR.SHARES_TRACKER_HEADER_ID = SEL.SHARES_TRACKER_HEADER_ID
			GROUP BY HDR.SHARES_TRACKER_HEADER_ID
			)
			SELECT  SHARE_YEAR, SUM(SHARE_AMT) AS PROFIT_LOSS FROM (
			SELECT (B.AMOUNT - A.AMOUNT) AS SHARE_AMT,
			(SELECT MONTH(MAX(SHARES_SELL_DATE)) FROM SHARES_TRACKER_SELL WHERE SHARES_TRACKER_HEADER_ID = HD.SHARES_TRACKER_HEADER_ID) AS SHARE_MONTH,
			(SELECT YEAR(MAX(SHARES_SELL_DATE)) FROM SHARES_TRACKER_SELL WHERE SHARES_TRACKER_HEADER_ID = HD.SHARES_TRACKER_HEADER_ID) AS SHARE_YEAR
			FROM SHARES_TRACKER_HEADER HD
			LEFT JOIN SHARETRACKERBUY A
			ON SHARES_TRACKER_HEADER_ID = A.SHARES_ID
			LEFT JOIN SHARETRACKERSELL B
			ON A.SHARES_ID = B.SHARES_ID
			) AS MAIN
			GROUP BY SHARE_YEAR
			HAVING SUM(SHARE_AMT) IS NOT NULL
			ORDER BY SHARE_YEAR desc
		</query>
	</queries>


	<messages>
		<message Id="Error_1">Username does not exist.</message>
		<message Id="Error_2">Enter the username.</message>
		<message Id="Error_3">Enter the password.</message>
		<message Id="Error_4">Enter the confirm password.</message>
		<message Id="Error_5">Password and confirm password did not match</message>
		<message Id="Error_6">Enter the first name.</message>
		<message Id="Error_7">Enter the last name.</message>
		<message Id="Error_8">Enter the gender.</message>
		<message Id="Error_9">User Id must be XXXX@XXX.com</message>
		<message Id="Error_10">Please Enter Number</message>
		<message Id="Error_11">Please enter the amount</message>
		<message Id="Error_12">Please enter the expenses Item</message>
		<message Id="Error_13">Please enter the expenses type</message>
		<message Id="Error_14">Please select the record</message>
		<message Id="Error_15">Please enter the asset description.</message>
		<message Id="Error_16">Please enter the asset amount.</message>
		<message Id="Error_17">Please select the demat account value.</message>
		<message Id="Error_18">Please enter the mutual fund name.</message>
		<message Id="RegSuc">Registration Successfully</message>
		<message Id="HusbandGive">Husband will give {0} Rs to Wife.</message>
		<message Id="WifeExtra">Wife have {0} extra Rs</message>
		<message Id="AllClear">All Clear</message>

	</messages>
</entity>
